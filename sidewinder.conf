input {

  file{
    
    path => "E:/Log/Firewall/28 jun 2015/messages.log"
    type => "McAfee Firewall Enterprise (Sidewinder) Log"
    start_position => "beginning"

  }
}
 
filter{
  
    ruby{

        code=>"
        
            fieldArray=event['message'].split(',')
            element=fieldArray[3].split('=')[1]

            if(element=='t_ipftraffic')
              event['g1']=element
              event['g2']=fieldArray[14].split('=')[1]

            elsif(element=='t_nettraffic')
              event['g1']=element
              event['g2']=fieldArray[14].split('=')[1]

            elsif(element=='t_netprobe')
              event['g1']=element
              event['g2']=fieldArray[6].split('=')[1]

            elsif(element=='t_info')
              event['g1']=element
              event['g2']=fieldArray[14].split('=')[1]

            elsif(element=='t_alert' || element=='t_geninfo' || element=='t_lcm' || element=='t_important' || element=='t_cfg_change' || element=='t_error' || element=='t_software_failure')
              event['g1']=element

            elsif(element=='t_attack')
              event['g1']=element
              event['g2']=fieldArray[15].split('=')[1]

            else

            end

        "
    }

    if[g1]=="t_ipftraffic"{
      if[g2]=="IP Filter session open" or [g2]=="IP Filter session close" or [g2]=="IP Filter session timeout"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message" => "%{IP_FILTER_SESSION_CLOSE_TIMEOUT}" }
        }
      }else{
      mutate{
       add_field => {"Pattern"=>"None"}
        }
      }
    }
    else if[g1]=="t_nettraffic"{
      if[g2]=="proxy traffic end" or [g2]=="proxy traffic continue"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message" => "%{PROXY_TRAFFIC_CONTINUE_END}" }
        }
      }else{
      mutate{
       add_field => {"Pattern"=>"None"}
        }
      }
    }
    else if[g1]=="t_netprobe"{
      if[g2]=="TCP netprobe" or [g2]=="UDP netprobe"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message" => "%{TCP_UDP_NETPROBE}" }
        }
      }else{
      mutate{
       add_field => {"Pattern"=>"None"}
        }
      }
    }
    else if[g1]=="t_info"{

      if[g2]=="MAC address overwrite"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message" => ["%{MAC_ADD_OVERWRITE1}","%{MAC_ADD_OVERWRITE2}"]}
        }
      }
      else if[g2]=="starting service"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message" => "%{STARTING_SERVICE}"}
        }
      }
      else{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>["%{T_INFO1}","%{T_INFO2}" ] }
        }

      }
    }
    else if[g1]=="t_alert"{

        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{T_ALERT}" }
        }
    }
    else if[g1]=="t_attack"{

      if[g2]=="packet discarded by rule"{
        grok {
        patterns_dir => "E:/Patterns"
        match => {"message" =>["%{PACKET_DISCARDED_IPFILTER}","%{PACKET_DISCARDED}"]}
        }
      }else if [g2]=="not HTTP or SSL"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{NOT_HTTP_OR_SSL}" }
        }
      }else if [g2]=="ACL deny"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{ACL_DENY}" }
        }
      }else if [g2]=="malformed request"{
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{MALFORMED_REQUEST}" }
        }
      }else if [g2]=="multiple Content-Length headers" or [g2]=="unrequested server input" or [g2]=="invalid response status line" {
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{MULTIPLE_CONTENT_HEADER}" }
        }
      }else if [g2]=="header too large" {
        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{HEADER_TOO_LARGE}" }
        }
      }
      else{
      mutate{
       add_field => {"Pattern"=>"None"}
        }
      }


    geoip {
      source => "AttackIP"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
    }


    }
    else if[g1]=="t_geninfo"{

        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{T_GENINFO}" }
        }
    }
    else if[g1]=="t_lcm"{

        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{T_LCM}" }
        }
    }
    else if[g1]=="t_important" or [g1]=="t_error" {

        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{T_INFO2}" }
        }
    }
    else if[g1]=="t_cfg_change"{

        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{T_CFG_CHANGE}" }
        }
    }
    else if[g1]=="t_software_failure"{

        grok {
        patterns_dir => "E:/Patterns"
        match => { "message"=>"%{T_SOFTWARE_FAILURE}" }
        }
    }
    else{

      mutate{
       add_field => {"Pattern"=>"None"}
      }
    }

      date {
    match => ["LogTimestamp","ISO8601"]
    target => "@timestamp"
  }

    mutate {
    remove_field => [ "AuditTimestamp","g1","g2","LogTimestamp" ] 
  }



  }


output {

  elasticsearch { 

  host => "localhost"
  index => "firewall-%{+yyyy.MM.dd}"

   }
  
   
}
